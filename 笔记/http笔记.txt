Http协议(超文本传输协议HyperText Transfer Protocol)，它是基于TCP协议的应用层传输协议，
简单来说就是客户端和服务端进行数据传输的一种规则。

 Http 是一种无状态 (stateless) 协议, HTTP协议本身不会对发送过的请求和相应的通信状态进
 行持久化处理。这样做的目的是为了保持HTTP协议的简单性，从而能够快速处理大量的事务, 提
 高效率。然而，在许多应用场景中，我们需要保持用户登录的状态或记录用户购物车中的商品。
 由于HTTP是无状态协议，所以必须引入一些技术来记录管理状态，例如Cookie。

URL：用于查找某个资源的详细信息，格式如下：http://host:port[abs_path]


HTTP请求的数据格式：
请求行：Method Request-URL HTTP-Version 
	Method 有GET POST HEAD PUT DELETE TRACE OPTIONS

消息报头：消息报头由一系列的键值对组成，允许客户端向服务器端发送一些附加信息或者客户
端自身的信息。里面包含的信息：客户端接收的数据类型，cookie，是否进行持久连接，请求内
容的长度，HTTP授权的证书类型


请求正文：
	一般来说只有POST方法会有请求正文


HTTP响应：
	响应状态行：HTTP版本，状态码，对状态码的描述
		状态码：1XX指示信息，表示请求已经接收，继续处理；2XX成功，请求已经被成功接收、
		理解；3XX重定向，要完成请求需要更进一步的操作；4XX客户端错误，请求有语法错误
		或者请求无法实现，5XX服务器错误，服务器未能实现合法的请求

		常见的状态码：200 请求成功；400：BadRequest 客户端发送的请求有语法错误，不能
		被服务器理解；401 请求未授权；403 forbidden-服务器收到请求，但是拒绝提供服务；
		404：请求的资源不存在；500：服务器发生了不可预估的错误；503 服务器当前不能处
		理请求，一段时间之后再重试

	消息报头：时间，报文类型等

	响应正文：

HTTP协议的特点：
	1.支持客户/服务器模式。
	2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、
	POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序
	规模小，因而通信速度很快。
	3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
	4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客
	户的应答后，即断开连接。采用这种方式可以节省传输时间。早期这么做的原因是请求资源少，
	追求快。后来通过Connection: Keep-Alive实现长连接
	5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味
	着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另
	一方面，在服务器不需要先前信息时它的应答就较快。

	持久连接和非持久连接：在实际的应用中，客户端往往会发出一系列请求，接着服务器端对每个请
	求进行响应。对于这些请求|响应，如果每次都经过一个单独的TCP连接发送，称为非持久连接。反
	之，如果每次都经过相同的TCP连接进行发送，称为持久连接。

	非持久连接在每次请求|响应之后都要断开连接，下次再建立新的TCP连接，这样就造成了大量的通
	信开销。例如前面提到的往返时间(RTT) 就是在建立TCP连接的过程中的代价。非持久连接给服务
	器带来了沉重的负担，每台服务器可能同时面对数以百计甚至更多的请求。持久连接就是为了解决
	这些问题，其特点是一直保持TCP连接状态，直到遇到明确的中断要求之后再中断连接。持久连接
	减少了通信开销，节省了通信量。


Https的提出：
	HTTP的不足：通信使用明文(不加密),内容可能会被窃听；不验证通信方的身份,因此有可能遭遇伪
	装；无法证明报文的完整性,所以有可能已遭篡改。

	HTTP中没有没有加密机制，但是可以通过和SSL（安全套接层）或者TLS（安全传输协议）组合使用，
	来加密通信内容。在整个通信线路中加密。

	HTTPS 采用共享密钥加密（对称）和公开密钥加密（非对称）两者并用的混合加密机制。若密钥能
	够实现安全交换,那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加
	密相比,其处理速度要慢。

HTTPS工作过程：
	1.浏览器将自己支持的一套加密规则发送给网站。
	2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书
	里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。
	3.获得网站证书之后浏览器要做以下工作：
	(a). 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址
	一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。
	(b). 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码（接下来
	通信的密钥），并用证书中提供的公钥加密（共享密钥加密）。
	(c) 使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有
	信息发送给网站。
	4.网站接收浏览器发来的数据之后要做以下的操作：
	(a). 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否
	与浏览器发来的一致。
	(b). 使用密码加密一段握手消息，发送给浏览器。
	
	总结：1）服务器获得浏览器公钥；2）浏览器获得服务器公钥；3）浏览器验证 -> 随机密码 服务器
	的公钥加密 -> 通信的密钥 通信的密钥 -> 服务器；4）服务器用自己的私钥解出随机密码 -> 用密
	码解密握手消息（共享密钥通信）-> 验证HASH与浏览器是否一致（验证浏览器）

HTTPS的不足
	加密解密过程复杂，导致访问速度慢
	加密需要认向证机构付费
	整个页面的请求都要使用HTTPS
	5.
